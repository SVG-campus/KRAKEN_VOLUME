const express = require("express");
// src/index.js  (CommonJS for PM2)
require('dotenv').config();
const path = require('path');
const http = require('http');
const { Server } = require('socket.io');
const WebSocket = require('ws');
const axios = require('axios');

const PORT = Number(process.env.PORT || 3000);
const RATE_WINDOW_SEC = Number(process.env.RATE_WINDOW_SEC || 60);
const ALERT_THRESHOLD = Number(process.env.ALERT_THRESHOLD_PCT || 10);
const SLACK_WEBHOOK_URL = process.env.SLACK_WEBHOOK_URL || '';
const PAPER = `${process.env.PAPER || 'true'}`.toLowerCase() !== 'false';

const WS_PAIRS = (process.env.KRAKEN_WS_PAIRS || 'SOL/USD,XBT/USD,ETH/USD')
  .split(',').map(s => s.trim()).filter(Boolean);

// ---------- Express + Socket.IO ----------
const app = express();
const server = http.createServer(app);
const io = new Server(server, { cors: { origin: '*' } });

// Serve the Vite build from src/dist (because index.js lives in src/)
const frontendDistPath = path.join(__dirname, 'dist');
app.use(express.static(frontendDistPath));

// --- simple health + debug JSON ---
app.get('/healthz', (_req, res) => res.type('text/plain').send('ok'));
app.get('/api/pairs', (_req, res) => res.json({ pairs: WS_PAIRS }));
function currentSnapshot() {
  const pairs = {};
  for (const p of WS_PAIRS) {
    const S = perPair[p];
    if (!S.last) continue;
    pairs[p] = {
      ts: S.last.ts, price: S.last.price, avg24: S.last.avg24, vol24: S.last.vol24,
      volVelPct: pct(S.volVelPct), priceChangePct: pct(S.priceChangePct), diffPct: pct(S.diffPct)
    };
  }
  const ranked = Object.entries(pairs).sort((a,b)=>b[1].volVelPct-a[1].volVelPct).map(([k])=>k);
  return { ts: Math.floor(Date.now()/1000), pairs, top: ranked.slice(0, 2) };
}
app.get('/api/snapshot', (_req, res) => res.json(currentSnapshot()));

// Final SPA fallback (keep AFTER routes & static)
app.use((_req, res) => {
  res.sendFile(path.join(frontendDistPath, 'index.html'));
});

io.on('connection', (socket) => {
  socket.emit('hello', { ok: true, ts: Date.now() });
});

// ---------- Slack ----------
async function slack(text, blocks) {
  if (!SLACK_WEBHOOK_URL) return;
  try {
    await axios.post(SLACK_WEBHOOK_URL, blocks ? { text, blocks } : { text });
  } catch (e) {
    console.error('Slack error', e.message);
  }
}

// ---------- State & helpers ----------
const perPair = Object.create(null);
for (const p of WS_PAIRS) perPair[p] = { last: null, buf: [], volVelPct: 0, priceChangePct: 0, diffPct: 0 };
function pct(n){ return Number.isFinite(n) ? Math.round(n*100)/100 : 0; }

function computeVelocity(pair, ts, vol24, price, avg24) {
  const S = perPair[pair];
  const HORIZON_SEC = Math.max(RATE_WINDOW_SEC * 6, 300);
  S.buf.push({ ts, vol24 });
  while (S.buf.length && ts - S.buf[0].ts > HORIZON_SEC) S.buf.shift();

  let older = S.buf[0];
  for (let i = S.buf.length - 1; i >= 0; i--) {
    if (ts - S.buf[i].ts >= RATE_WINDOW_SEC) { older = S.buf[i]; break; }
  }
  const dt = Math.max(1, ts - older.ts);
  const v0 = Math.max(older.vol24 || 0, 1e-9);
  const dv = vol24 - (older.vol24 || 0);

  const volVelPct = ((dv / v0) * (3600 / dt)) * 100;
  const priceChangePct = ((price - avg24) / Math.max(avg24, 1e-9)) * 100;

  S.last = { ts, vol24, price, avg24 };
  S.volVelPct = volVelPct;
  S.priceChangePct = priceChangePct;
  S.diffPct = volVelPct - priceChangePct;
}

let lastAlert = 0;
function maybeAlert(pair) {
  const S = perPair[pair];
  if (!S || !S.last) return;
  const now = Date.now();
  if (now - lastAlert < 120000) return;

  if (S.volVelPct >= ALERT_THRESHOLD) {
    lastAlert = now;
    const msg = `‚ö° ${pair}: Volume velocity ${pct(S.volVelPct)}%/h (Œî vs price ${pct(S.diffPct)}%).`;
    slack(msg, [
      { type: 'section', text: { type: 'mrkdwn', text: `*Buy signal?* *${pair}*` } },
      { type: 'section', fields: [
        { type: 'mrkdwn', text: `*Vol velocity:*\n${pct(S.volVelPct)}%/h` },
        { type: 'mrkdwn', text: `*Price Œî vs 24h avg:*\n${pct(S.priceChangePct)}%` },
        { type: 'mrkdwn', text: `*Diff (vol - price):*\n${pct(S.diffPct)}%` },
      ] }
    ]);
  } else if (S.volVelPct <= -ALERT_THRESHOLD) {
    lastAlert = now;
    slack(`üßØ ${pair}: Negative volume velocity ${pct(S.volVelPct)}%/h (Œî vs price ${pct(S.diffPct)}%).`);
  }
}

// Broadcast snapshots to UI every 2s
setInterval(() => { io.emit('snapshot', currentSnapshot()); }, 2000);

// ---------- Kraken WS ‚Äúticker‚Äù ----------
function krakenSubscribe(ws, pairs) {
  ws.send(JSON.stringify({ event: 'subscribe', pair: pairs, subscription: { name: 'ticker' } }));
}
function parseTickerMessage(msg) {
  if (!Array.isArray(msg) || msg.length < 2 || typeof msg[1] !== 'object') return null;
  const data = msg[1];
  const maybe2 = typeof msg[2] === 'string' ? msg[2] : '';
  const maybe3 = typeof msg[3] === 'string' ? msg[3] : '';
  const pair = (maybe2.includes('/') ? maybe2 : (maybe3.includes('/') ? maybe3 : null));
  if (!pair) return null;
  const lastPrice = parseFloat(data.c?.[0] || '0');
  const vol24 = parseFloat(data.v?.[1] || '0');
  const avg24 = parseFloat(data.p?.[1] || '0');
  return { pair, lastPrice, vol24, avg24 };
}
function startKraken() {
  const ws = new WebSocket('wss://ws.kraken.com/');
  ws.on('open', () => {
    console.log('Kraken WS open. Subscribing:', WS_PAIRS.join(', '));
    krakenSubscribe(ws, WS_PAIRS);
  });
  ws.on('message', (buf) => {
    try {
      const obj = JSON.parse(buf.toString());
      if (obj.event) {
        if (obj.event === 'heartbeat') return;
        if (obj.event === 'subscriptionStatus') { if (obj.status !== 'subscribed') console.warn('Sub status', obj); return; }
        return;
      }
      const t = parseTickerMessage(obj);
      if (!t) return;
      const ts = Math.floor(Date.now() / 1000);
      computeVelocity(t.pair, ts, t.vol24, t.lastPrice, t.avg24);
      maybeAlert(t.pair);
    } catch (e) { console.error('WS parse err', e.message); }
  });
  ws.on('close', () => { console.warn('Kraken WS closed. Reconnecting in 3s‚Ä¶'); setTimeout(startKraken, 3000); });
  ws.on('error', (e) => { console.error('Kraken WS error', e.message); try { ws.close(); } catch {} });
}
startKraken();

// ---------- Start server ----------
server.listen(PORT, () => {
  console.log(`Server listening on :${PORT}`);
  console.log(`Open http://<your-ip>:${PORT}/`);
});

// SPA fallback: serve built index.html for any route not handled above
app.use((req, res) => {
  res.sendFile(path.join(__dirname, 'dist', 'index.html'));
});
